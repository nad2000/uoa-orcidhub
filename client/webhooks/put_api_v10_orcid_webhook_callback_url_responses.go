// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/nad2000/uoa-orcidhub/models"
)

// PutAPIV10OrcidWebhookCallbackURLReader is a Reader for the PutAPIV10OrcidWebhookCallbackURL structure.
type PutAPIV10OrcidWebhookCallbackURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAPIV10OrcidWebhookCallbackURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPutAPIV10OrcidWebhookCallbackURLCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewPutAPIV10OrcidWebhookCallbackURLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewPutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutAPIV10OrcidWebhookCallbackURLCreated creates a PutAPIV10OrcidWebhookCallbackURLCreated with default headers values
func NewPutAPIV10OrcidWebhookCallbackURLCreated() *PutAPIV10OrcidWebhookCallbackURLCreated {
	return &PutAPIV10OrcidWebhookCallbackURLCreated{}
}

/*PutAPIV10OrcidWebhookCallbackURLCreated handles this case with default header values.

A webhoook successfully set up.
*/
type PutAPIV10OrcidWebhookCallbackURLCreated struct {
}

func (o *PutAPIV10OrcidWebhookCallbackURLCreated) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/{orcid}/webhook/{callback_url}][%d] putApiV10OrcidWebhookCallbackUrlCreated ", 201)
}

func (o *PutAPIV10OrcidWebhookCallbackURLCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAPIV10OrcidWebhookCallbackURLNotFound creates a PutAPIV10OrcidWebhookCallbackURLNotFound with default headers values
func NewPutAPIV10OrcidWebhookCallbackURLNotFound() *PutAPIV10OrcidWebhookCallbackURLNotFound {
	return &PutAPIV10OrcidWebhookCallbackURLNotFound{}
}

/*PutAPIV10OrcidWebhookCallbackURLNotFound handles this case with default header values.

Invalid ORCID iD.
*/
type PutAPIV10OrcidWebhookCallbackURLNotFound struct {
	Payload *models.Error
}

func (o *PutAPIV10OrcidWebhookCallbackURLNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/{orcid}/webhook/{callback_url}][%d] putApiV10OrcidWebhookCallbackUrlNotFound  %+v", 404, o.Payload)
}

func (o *PutAPIV10OrcidWebhookCallbackURLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType creates a PutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType with default headers values
func NewPutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType() *PutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType {
	return &PutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType{}
}

/*PutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType handles this case with default header values.

Invalid call-back URL or missing ORCID iD.
*/
type PutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType struct {
	Payload *models.Error
}

func (o *PutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /api/v1.0/{orcid}/webhook/{callback_url}][%d] putApiV10OrcidWebhookCallbackUrlUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutAPIV10OrcidWebhookCallbackURLUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
