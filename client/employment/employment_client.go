// Code generated by go-swagger; DO NOT EDIT.

package employment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCodesEmployeeAction information about logged in user

Returns employee-action code and values
*/
func (a *Client) GetCodesEmployeeAction(params *GetCodesEmployeeActionParams, authInfo runtime.ClientAuthInfoWriter) (*GetCodesEmployeeActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCodesEmployeeActionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCodesEmployeeAction",
		Method:             "GET",
		PathPattern:        "/codes/employee-action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCodesEmployeeActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCodesEmployeeActionOK), nil

}

/*
GetCodesEmployeeStatus information about logged in user

Returns employee-status code and values
*/
func (a *Client) GetCodesEmployeeStatus(params *GetCodesEmployeeStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetCodesEmployeeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCodesEmployeeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCodesEmployeeStatus",
		Method:             "GET",
		PathPattern:        "/codes/employee-status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCodesEmployeeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCodesEmployeeStatusOK), nil

}

/*
GetCodesRegtemp information about logged in user

Returns regtemp code and values
*/
func (a *Client) GetCodesRegtemp(params *GetCodesRegtempParams, authInfo runtime.ClientAuthInfoWriter) (*GetCodesRegtempOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCodesRegtempParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCodesRegtemp",
		Method:             "GET",
		PathPattern:        "/codes/regtemp",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCodesRegtempReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCodesRegtempOK), nil

}

/*
GetCodesStatus information about logged in user

Returns status code and values
*/
func (a *Client) GetCodesStatus(params *GetCodesStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetCodesStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCodesStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCodesStatus",
		Method:             "GET",
		PathPattern:        "/codes/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCodesStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCodesStatusOK), nil

}

/*
GetEmployeeSelf returns employment information of the remote user

'Returns a complete hremployee object for current logged in user, including subresources such as phones or addresses.'

*/
func (a *Client) GetEmployeeSelf(params *GetEmployeeSelfParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeSelfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeSelfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeSelf",
		Method:             "GET",
		PathPattern:        "/employee/self",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEmployeeSelfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeSelfOK), nil

}

/*
GetEmployeeUpiOrID returns the employees information

'Returns a complete hremployee object for user with the entered upi or id, including subresources such as phones or addresses.'

*/
func (a *Client) GetEmployeeUpiOrID(params *GetEmployeeUpiOrIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeUpiOrIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeUpiOrIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeUpiOrID",
		Method:             "GET",
		PathPattern:        "/employee/{upiOrId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEmployeeUpiOrIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeUpiOrIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
