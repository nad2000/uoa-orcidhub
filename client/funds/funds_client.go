// Code generated by go-swagger; DO NOT EDIT.

package funds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new funds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for funds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIV10FundsTaskID deletes the specified fund task
*/
func (a *Client) DeleteAPIV10FundsTaskID(params *DeleteAPIV10FundsTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIV10FundsTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV10FundsTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV10FundsTaskID",
		Method:             "DELETE",
		PathPattern:        "/api/v1.0/funds/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV10FundsTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV10FundsTaskIDOK), nil

}

/*
GetAPIV10FundsTaskID retrieves the specified fund task
*/
func (a *Client) GetAPIV10FundsTaskID(params *GetAPIV10FundsTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV10FundsTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV10FundsTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV10FundsTaskID",
		Method:             "GET",
		PathPattern:        "/api/v1.0/funds/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV10FundsTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV10FundsTaskIDOK), nil

}

/*
PostAPIV10Funds uploads the fund task
*/
func (a *Client) PostAPIV10Funds(params *PostAPIV10FundsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV10FundsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV10FundsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV10Funds",
		Method:             "POST",
		PathPattern:        "/api/v1.0/funds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/csv", "text/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV10FundsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV10FundsOK), nil

}

/*
PostAPIV10FundsTaskID uploads the task and completely override the fund task
*/
func (a *Client) PostAPIV10FundsTaskID(params *PostAPIV10FundsTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV10FundsTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV10FundsTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV10FundsTaskID",
		Method:             "POST",
		PathPattern:        "/api/v1.0/funds/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV10FundsTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV10FundsTaskIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
