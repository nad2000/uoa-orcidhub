// Code generated by go-swagger; DO NOT EDIT.

package peer_reviews

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new peer reviews API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for peer reviews API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIV10PeerReviewsTaskID deletes the specified peer review task
*/
func (a *Client) DeleteAPIV10PeerReviewsTaskID(params *DeleteAPIV10PeerReviewsTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIV10PeerReviewsTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV10PeerReviewsTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV10PeerReviewsTaskID",
		Method:             "DELETE",
		PathPattern:        "/api/v1.0/peer-reviews/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV10PeerReviewsTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV10PeerReviewsTaskIDOK), nil

}

/*
GetAPIV10PeerReviewsTaskID retrieves the specified peer review record processing task
*/
func (a *Client) GetAPIV10PeerReviewsTaskID(params *GetAPIV10PeerReviewsTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV10PeerReviewsTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV10PeerReviewsTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV10PeerReviewsTaskID",
		Method:             "GET",
		PathPattern:        "/api/v1.0/peer-reviews/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV10PeerReviewsTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV10PeerReviewsTaskIDOK), nil

}

/*
PostAPIV10PeerReviews uploads the peer review record processing task
*/
func (a *Client) PostAPIV10PeerReviews(params *PostAPIV10PeerReviewsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV10PeerReviewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV10PeerReviewsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV10PeerReviews",
		Method:             "POST",
		PathPattern:        "/api/v1.0/peer-reviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV10PeerReviewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV10PeerReviewsOK), nil

}

/*
PostAPIV10PeerReviewsTaskID uploads the task and completely override the peer review record processing task
*/
func (a *Client) PostAPIV10PeerReviewsTaskID(params *PostAPIV10PeerReviewsTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV10PeerReviewsTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV10PeerReviewsTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV10PeerReviewsTaskID",
		Method:             "POST",
		PathPattern:        "/api/v1.0/peer-reviews/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV10PeerReviewsTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV10PeerReviewsTaskIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
