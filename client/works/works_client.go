// Code generated by go-swagger; DO NOT EDIT.

package works

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new works API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for works API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIV10WorksTaskID deletes the specified work task
*/
func (a *Client) DeleteAPIV10WorksTaskID(params *DeleteAPIV10WorksTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAPIV10WorksTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV10WorksTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIV10WorksTaskID",
		Method:             "DELETE",
		PathPattern:        "/api/v1.0/works/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIV10WorksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIV10WorksTaskIDOK), nil

}

/*
GetAPIV10WorksTaskID retrieves the specified work record processing task
*/
func (a *Client) GetAPIV10WorksTaskID(params *GetAPIV10WorksTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAPIV10WorksTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV10WorksTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIV10WorksTaskID",
		Method:             "GET",
		PathPattern:        "/api/v1.0/works/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIV10WorksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIV10WorksTaskIDOK), nil

}

/*
PostAPIV10Works uploads the work record processing task
*/
func (a *Client) PostAPIV10Works(params *PostAPIV10WorksParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV10WorksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV10WorksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV10Works",
		Method:             "POST",
		PathPattern:        "/api/v1.0/works",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV10WorksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV10WorksOK), nil

}

/*
PostAPIV10WorksTaskID uploads the task and completely override the work record processing task
*/
func (a *Client) PostAPIV10WorksTaskID(params *PostAPIV10WorksTaskIDParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV10WorksTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV10WorksTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV10WorksTaskID",
		Method:             "POST",
		PathPattern:        "/api/v1.0/works/{task_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "text/yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIV10WorksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIV10WorksTaskIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
