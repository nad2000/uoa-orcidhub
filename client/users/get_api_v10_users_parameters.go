// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAPIV10UsersParams creates a new GetAPIV10UsersParams object
// with the default values initialized.
func NewGetAPIV10UsersParams() *GetAPIV10UsersParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(20)
	)
	return &GetAPIV10UsersParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV10UsersParamsWithTimeout creates a new GetAPIV10UsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAPIV10UsersParamsWithTimeout(timeout time.Duration) *GetAPIV10UsersParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(20)
	)
	return &GetAPIV10UsersParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetAPIV10UsersParamsWithContext creates a new GetAPIV10UsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAPIV10UsersParamsWithContext(ctx context.Context) *GetAPIV10UsersParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(20)
	)
	return &GetAPIV10UsersParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetAPIV10UsersParamsWithHTTPClient creates a new GetAPIV10UsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAPIV10UsersParamsWithHTTPClient(client *http.Client) *GetAPIV10UsersParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(20)
	)
	return &GetAPIV10UsersParams{
		Page:       &pageDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*GetAPIV10UsersParams contains all the parameters to send to the API endpoint
for the get API v10 users operation typically these are written to a http.Request
*/
type GetAPIV10UsersParams struct {

	/*FromDate
	  The date starting from which user accounts were created and/or updated.

	*/
	FromDate *string
	/*Page
	  The number of the page of retrieved data starting counting from 1

	*/
	Page *int64
	/*PageSize
	  The size of the data page

	*/
	PageSize *int64
	/*ToDate
	  The date until which user accounts were created and/or updated.

	*/
	ToDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get API v10 users params
func (o *GetAPIV10UsersParams) WithTimeout(timeout time.Duration) *GetAPIV10UsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v10 users params
func (o *GetAPIV10UsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v10 users params
func (o *GetAPIV10UsersParams) WithContext(ctx context.Context) *GetAPIV10UsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v10 users params
func (o *GetAPIV10UsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v10 users params
func (o *GetAPIV10UsersParams) WithHTTPClient(client *http.Client) *GetAPIV10UsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v10 users params
func (o *GetAPIV10UsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromDate adds the fromDate to the get API v10 users params
func (o *GetAPIV10UsersParams) WithFromDate(fromDate *string) *GetAPIV10UsersParams {
	o.SetFromDate(fromDate)
	return o
}

// SetFromDate adds the fromDate to the get API v10 users params
func (o *GetAPIV10UsersParams) SetFromDate(fromDate *string) {
	o.FromDate = fromDate
}

// WithPage adds the page to the get API v10 users params
func (o *GetAPIV10UsersParams) WithPage(page *int64) *GetAPIV10UsersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get API v10 users params
func (o *GetAPIV10UsersParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get API v10 users params
func (o *GetAPIV10UsersParams) WithPageSize(pageSize *int64) *GetAPIV10UsersParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get API v10 users params
func (o *GetAPIV10UsersParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithToDate adds the toDate to the get API v10 users params
func (o *GetAPIV10UsersParams) WithToDate(toDate *string) *GetAPIV10UsersParams {
	o.SetToDate(toDate)
	return o
}

// SetToDate adds the toDate to the get API v10 users params
func (o *GetAPIV10UsersParams) SetToDate(toDate *string) {
	o.ToDate = toDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV10UsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FromDate != nil {

		// query param from_date
		var qrFromDate string
		if o.FromDate != nil {
			qrFromDate = *o.FromDate
		}
		qFromDate := qrFromDate
		if qFromDate != "" {
			if err := r.SetQueryParam("from_date", qFromDate); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.ToDate != nil {

		// query param to_date
		var qrToDate string
		if o.ToDate != nil {
			qrToDate = *o.ToDate
		}
		qToDate := qrToDate
		if qToDate != "" {
			if err := r.SetQueryParam("to_date", qToDate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
