// Code generated by go-swagger; DO NOT EDIT.

package orcid_proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/nad2000/uoa-orcidhub/models"
)

// GetOrcidAPIVersionOrcidPathReader is a Reader for the GetOrcidAPIVersionOrcidPath structure.
type GetOrcidAPIVersionOrcidPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrcidAPIVersionOrcidPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetOrcidAPIVersionOrcidPathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewGetOrcidAPIVersionOrcidPathForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetOrcidAPIVersionOrcidPathNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGetOrcidAPIVersionOrcidPathUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOrcidAPIVersionOrcidPathOK creates a GetOrcidAPIVersionOrcidPathOK with default headers values
func NewGetOrcidAPIVersionOrcidPathOK() *GetOrcidAPIVersionOrcidPathOK {
	return &GetOrcidAPIVersionOrcidPathOK{}
}

/*GetOrcidAPIVersionOrcidPathOK handles this case with default header values.

Successful operation
*/
type GetOrcidAPIVersionOrcidPathOK struct {
	Payload interface{}
}

func (o *GetOrcidAPIVersionOrcidPathOK) Error() string {
	return fmt.Sprintf("[GET /orcid/api/{version}/{orcid}/{path}][%d] getOrcidApiVersionOrcidPathOK  %+v", 200, o.Payload)
}

func (o *GetOrcidAPIVersionOrcidPathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrcidAPIVersionOrcidPathForbidden creates a GetOrcidAPIVersionOrcidPathForbidden with default headers values
func NewGetOrcidAPIVersionOrcidPathForbidden() *GetOrcidAPIVersionOrcidPathForbidden {
	return &GetOrcidAPIVersionOrcidPathForbidden{}
}

/*GetOrcidAPIVersionOrcidPathForbidden handles this case with default header values.

The user hasn't granted acceess to the profile.
*/
type GetOrcidAPIVersionOrcidPathForbidden struct {
	Payload *models.Error
}

func (o *GetOrcidAPIVersionOrcidPathForbidden) Error() string {
	return fmt.Sprintf("[GET /orcid/api/{version}/{orcid}/{path}][%d] getOrcidApiVersionOrcidPathForbidden  %+v", 403, o.Payload)
}

func (o *GetOrcidAPIVersionOrcidPathForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrcidAPIVersionOrcidPathNotFound creates a GetOrcidAPIVersionOrcidPathNotFound with default headers values
func NewGetOrcidAPIVersionOrcidPathNotFound() *GetOrcidAPIVersionOrcidPathNotFound {
	return &GetOrcidAPIVersionOrcidPathNotFound{}
}

/*GetOrcidAPIVersionOrcidPathNotFound handles this case with default header values.

Resource not found
*/
type GetOrcidAPIVersionOrcidPathNotFound struct {
	Payload *models.Error
}

func (o *GetOrcidAPIVersionOrcidPathNotFound) Error() string {
	return fmt.Sprintf("[GET /orcid/api/{version}/{orcid}/{path}][%d] getOrcidApiVersionOrcidPathNotFound  %+v", 404, o.Payload)
}

func (o *GetOrcidAPIVersionOrcidPathNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrcidAPIVersionOrcidPathUnsupportedMediaType creates a GetOrcidAPIVersionOrcidPathUnsupportedMediaType with default headers values
func NewGetOrcidAPIVersionOrcidPathUnsupportedMediaType() *GetOrcidAPIVersionOrcidPathUnsupportedMediaType {
	return &GetOrcidAPIVersionOrcidPathUnsupportedMediaType{}
}

/*GetOrcidAPIVersionOrcidPathUnsupportedMediaType handles this case with default header values.

Missing or invalid ORCID iD.
*/
type GetOrcidAPIVersionOrcidPathUnsupportedMediaType struct {
	Payload *models.Error
}

func (o *GetOrcidAPIVersionOrcidPathUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /orcid/api/{version}/{orcid}/{path}][%d] getOrcidApiVersionOrcidPathUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOrcidAPIVersionOrcidPathUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
