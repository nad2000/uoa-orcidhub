// Code generated by go-swagger; DO NOT EDIT.

package orcid_proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/nad2000/uoa-orcidhub/models"
)

// PutOrcidAPIVersionOrcidPathReader is a Reader for the PutOrcidAPIVersionOrcidPath structure.
type PutOrcidAPIVersionOrcidPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutOrcidAPIVersionOrcidPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutOrcidAPIVersionOrcidPathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewPutOrcidAPIVersionOrcidPathForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutOrcidAPIVersionOrcidPathNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewPutOrcidAPIVersionOrcidPathUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutOrcidAPIVersionOrcidPathOK creates a PutOrcidAPIVersionOrcidPathOK with default headers values
func NewPutOrcidAPIVersionOrcidPathOK() *PutOrcidAPIVersionOrcidPathOK {
	return &PutOrcidAPIVersionOrcidPathOK{}
}

/*PutOrcidAPIVersionOrcidPathOK handles this case with default header values.

successful operation
*/
type PutOrcidAPIVersionOrcidPathOK struct {
	Payload interface{}
}

func (o *PutOrcidAPIVersionOrcidPathOK) Error() string {
	return fmt.Sprintf("[PUT /orcid/api/{version}/{orcid}/{path}][%d] putOrcidApiVersionOrcidPathOK  %+v", 200, o.Payload)
}

func (o *PutOrcidAPIVersionOrcidPathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrcidAPIVersionOrcidPathForbidden creates a PutOrcidAPIVersionOrcidPathForbidden with default headers values
func NewPutOrcidAPIVersionOrcidPathForbidden() *PutOrcidAPIVersionOrcidPathForbidden {
	return &PutOrcidAPIVersionOrcidPathForbidden{}
}

/*PutOrcidAPIVersionOrcidPathForbidden handles this case with default header values.

The user hasn't granted acceess to the profile.
*/
type PutOrcidAPIVersionOrcidPathForbidden struct {
	Payload *models.Error
}

func (o *PutOrcidAPIVersionOrcidPathForbidden) Error() string {
	return fmt.Sprintf("[PUT /orcid/api/{version}/{orcid}/{path}][%d] putOrcidApiVersionOrcidPathForbidden  %+v", 403, o.Payload)
}

func (o *PutOrcidAPIVersionOrcidPathForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrcidAPIVersionOrcidPathNotFound creates a PutOrcidAPIVersionOrcidPathNotFound with default headers values
func NewPutOrcidAPIVersionOrcidPathNotFound() *PutOrcidAPIVersionOrcidPathNotFound {
	return &PutOrcidAPIVersionOrcidPathNotFound{}
}

/*PutOrcidAPIVersionOrcidPathNotFound handles this case with default header values.

Resource not found
*/
type PutOrcidAPIVersionOrcidPathNotFound struct {
	Payload *models.Error
}

func (o *PutOrcidAPIVersionOrcidPathNotFound) Error() string {
	return fmt.Sprintf("[PUT /orcid/api/{version}/{orcid}/{path}][%d] putOrcidApiVersionOrcidPathNotFound  %+v", 404, o.Payload)
}

func (o *PutOrcidAPIVersionOrcidPathNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutOrcidAPIVersionOrcidPathUnsupportedMediaType creates a PutOrcidAPIVersionOrcidPathUnsupportedMediaType with default headers values
func NewPutOrcidAPIVersionOrcidPathUnsupportedMediaType() *PutOrcidAPIVersionOrcidPathUnsupportedMediaType {
	return &PutOrcidAPIVersionOrcidPathUnsupportedMediaType{}
}

/*PutOrcidAPIVersionOrcidPathUnsupportedMediaType handles this case with default header values.

Missing or invalid ORCID iD.
*/
type PutOrcidAPIVersionOrcidPathUnsupportedMediaType struct {
	Payload *models.Error
}

func (o *PutOrcidAPIVersionOrcidPathUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /orcid/api/{version}/{orcid}/{path}][%d] putOrcidApiVersionOrcidPathUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *PutOrcidAPIVersionOrcidPathUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
