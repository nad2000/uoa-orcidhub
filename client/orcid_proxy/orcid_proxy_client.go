// Code generated by go-swagger; DO NOT EDIT.

package orcid_proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new orcid proxy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for orcid proxy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteOrcidAPIVersionOrcidPath delete orcid API version orcid path API
*/
func (a *Client) DeleteOrcidAPIVersionOrcidPath(params *DeleteOrcidAPIVersionOrcidPathParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteOrcidAPIVersionOrcidPathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrcidAPIVersionOrcidPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOrcidAPIVersionOrcidPath",
		Method:             "DELETE",
		PathPattern:        "/orcid/api/{version}/{orcid}/{path}",
		ProducesMediaTypes: []string{"application/json", "application/orcid+json; qs=2", "application/orcid+xml; qs=3", "application/vnd.orcid+json; qs=4", "application/vnd.orcid+xml; qs=5", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteOrcidAPIVersionOrcidPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrcidAPIVersionOrcidPathNoContent), nil

}

/*
GetOrcidAPIVersionOrcid get orcid API version orcid API
*/
func (a *Client) GetOrcidAPIVersionOrcid(params *GetOrcidAPIVersionOrcidParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrcidAPIVersionOrcidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrcidAPIVersionOrcidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrcidAPIVersionOrcid",
		Method:             "GET",
		PathPattern:        "/orcid/api/{version}/{orcid}",
		ProducesMediaTypes: []string{"application/json", "application/orcid+json; qs=2", "application/orcid+xml; qs=3", "application/vnd.orcid+json; qs=4", "application/vnd.orcid+xml; qs=5", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrcidAPIVersionOrcidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrcidAPIVersionOrcidOK), nil

}

/*
GetOrcidAPIVersionOrcidPath get orcid API version orcid path API
*/
func (a *Client) GetOrcidAPIVersionOrcidPath(params *GetOrcidAPIVersionOrcidPathParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrcidAPIVersionOrcidPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrcidAPIVersionOrcidPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrcidAPIVersionOrcidPath",
		Method:             "GET",
		PathPattern:        "/orcid/api/{version}/{orcid}/{path}",
		ProducesMediaTypes: []string{"application/json", "application/orcid+json; qs=2", "application/orcid+xml; qs=3", "application/vnd.orcid+json; qs=4", "application/vnd.orcid+xml; qs=5", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOrcidAPIVersionOrcidPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrcidAPIVersionOrcidPathOK), nil

}

/*
PostOrcidAPIVersionOrcidPath post orcid API version orcid path API
*/
func (a *Client) PostOrcidAPIVersionOrcidPath(params *PostOrcidAPIVersionOrcidPathParams, authInfo runtime.ClientAuthInfoWriter) (*PostOrcidAPIVersionOrcidPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrcidAPIVersionOrcidPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrcidAPIVersionOrcidPath",
		Method:             "POST",
		PathPattern:        "/orcid/api/{version}/{orcid}/{path}",
		ProducesMediaTypes: []string{"application/json", "application/orcid+json; qs=2", "application/orcid+xml; qs=3", "application/vnd.orcid+json; qs=4", "application/vnd.orcid+xml; qs=5", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/orcid+json; qs=2", "application/orcid+xml; qs=3", "application/vnd.orcid+json; qs=4", "application/vnd.orcid+xml; qs=5", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostOrcidAPIVersionOrcidPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrcidAPIVersionOrcidPathOK), nil

}

/*
PutOrcidAPIVersionOrcidPath put orcid API version orcid path API
*/
func (a *Client) PutOrcidAPIVersionOrcidPath(params *PutOrcidAPIVersionOrcidPathParams, authInfo runtime.ClientAuthInfoWriter) (*PutOrcidAPIVersionOrcidPathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOrcidAPIVersionOrcidPathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutOrcidAPIVersionOrcidPath",
		Method:             "PUT",
		PathPattern:        "/orcid/api/{version}/{orcid}/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/orcid+json; qs=2", "application/orcid+xml; qs=3", "application/vnd.orcid+json; qs=4", "application/vnd.orcid+xml; qs=5", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutOrcidAPIVersionOrcidPathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrcidAPIVersionOrcidPathOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
