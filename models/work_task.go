// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkTask work task
// swagger:model WorkTask
type WorkTask struct {

	// completed at
	// Format: date-time
	CompletedAt strfmt.DateTime `json:"completed-at,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created-at,omitempty"`

	// expires at
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expires-at,omitempty"`

	// filename
	Filename string `json:"filename,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// records
	Records []WorkTaskRecord `json:"records"`

	// task type
	// Enum: [WORK WORKING]
	TaskType string `json:"task-type,omitempty"`
}

// Validate validates this work task
func (m *WorkTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkTask) validateCompletedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CompletedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("completed-at", "body", "date-time", m.CompletedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkTask) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created-at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkTask) validateExpiresAt(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expires-at", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var workTaskTypeTaskTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WORK","WORKING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workTaskTypeTaskTypePropEnum = append(workTaskTypeTaskTypePropEnum, v)
	}
}

const (

	// WorkTaskTaskTypeWORK captures enum value "WORK"
	WorkTaskTaskTypeWORK string = "WORK"

	// WorkTaskTaskTypeWORKING captures enum value "WORKING"
	WorkTaskTaskTypeWORKING string = "WORKING"
)

// prop value enum
func (m *WorkTask) validateTaskTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workTaskTypeTaskTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkTask) validateTaskType(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTaskTypeEnum("task-type", "body", m.TaskType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkTask) UnmarshalBinary(b []byte) error {
	var res WorkTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
