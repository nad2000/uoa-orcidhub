// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// PostHangleHandlerFunc turns a function with the right signature into a post hangle handler
type PostHangleHandlerFunc func(PostHangleParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostHangleHandlerFunc) Handle(params PostHangleParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostHangleHandler interface for that can handle valid post hangle params
type PostHangleHandler interface {
	Handle(PostHangleParams, interface{}) middleware.Responder
}

// NewPostHangle creates a new http.Handler for the post hangle operation
func NewPostHangle(ctx *middleware.Context, handler PostHangleHandler) *PostHangle {
	return &PostHangle{Context: ctx, Handler: handler}
}

/*PostHangle swagger:route POST /hangle postHangle

Handle employer update event

Handle employer update event.

*/
type PostHangle struct {
	Context *middleware.Context
	Handler PostHangleHandler
}

func (o *PostHangle) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostHangleParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostHangleBody post hangle body
// swagger:model PostHangleBody
type PostHangleBody struct {

	// User UAID
	Subject string `json:"subject,omitempty"`
}

// Validate validates this post hangle body
func (o *PostHangleBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostHangleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostHangleBody) UnmarshalBinary(b []byte) error {
	var res PostHangleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
